// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCEditor.SC2
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ExportNames : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static ExportNames GetRootAsExportNames(ByteBuffer _bb) { return GetRootAsExportNames(_bb, new ExportNames()); }
  public static ExportNames GetRootAsExportNames(ByteBuffer _bb, ExportNames obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyExportNames(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, ExportNamesVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ExportNames __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort ObjectIds(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(__p.__vector(o) + j * 2) : (ushort)0; }
  public int ObjectIdsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ushort> GetObjectIdsBytes() { return __p.__vector_as_span<ushort>(4, 2); }
#else
  public ArraySegment<byte>? GetObjectIdsBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public ushort[] GetObjectIdsArray() { return __p.__vector_as_array<ushort>(4); }
  public uint NameRefIds(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int NameRefIdsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<uint> GetNameRefIdsBytes() { return __p.__vector_as_span<uint>(6, 4); }
#else
  public ArraySegment<byte>? GetNameRefIdsBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public uint[] GetNameRefIdsArray() { return __p.__vector_as_array<uint>(6); }

  public static Offset<SCEditor.SC2.ExportNames> CreateExportNames(FlatBufferBuilder builder,
      VectorOffset object_idsOffset = default(VectorOffset),
      VectorOffset name_ref_idsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    ExportNames.AddNameRefIds(builder, name_ref_idsOffset);
    ExportNames.AddObjectIds(builder, object_idsOffset);
    return ExportNames.EndExportNames(builder);
  }

  public static void StartExportNames(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddObjectIds(FlatBufferBuilder builder, VectorOffset objectIdsOffset) { builder.AddOffset(0, objectIdsOffset.Value, 0); }
  public static VectorOffset CreateObjectIdsVector(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); for (int i = data.Length - 1; i >= 0; i--) builder.AddUshort(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateObjectIdsVectorBlock(FlatBufferBuilder builder, ushort[] data) { builder.StartVector(2, data.Length, 2); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObjectIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<ushort> data) { builder.StartVector(2, data.Count, 2); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObjectIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<ushort>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartObjectIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(2, numElems, 2); }
  public static void AddNameRefIds(FlatBufferBuilder builder, VectorOffset nameRefIdsOffset) { builder.AddOffset(1, nameRefIdsOffset.Value, 0); }
  public static VectorOffset CreateNameRefIdsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNameRefIdsVectorBlock(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNameRefIdsVectorBlock(FlatBufferBuilder builder, ArraySegment<uint> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNameRefIdsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<uint>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNameRefIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SCEditor.SC2.ExportNames> EndExportNames(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCEditor.SC2.ExportNames>(o);
  }
  public static void FinishExportNamesBuffer(FlatBufferBuilder builder, Offset<SCEditor.SC2.ExportNames> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedExportNamesBuffer(FlatBufferBuilder builder, Offset<SCEditor.SC2.ExportNames> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class ExportNamesVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*ObjectIds*/, 2 /*ushort*/, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*NameRefIds*/, 4 /*uint*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
