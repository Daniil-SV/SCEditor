// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCEditor.SC2
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MovieClips : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MovieClips GetRootAsMovieClips(ByteBuffer _bb) { return GetRootAsMovieClips(_bb, new MovieClips()); }
  public static MovieClips GetRootAsMovieClips(ByteBuffer _bb, MovieClips obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyMovieClips(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, MovieClipsVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MovieClips __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SCEditor.SC2.MovieClip? Movieclips(int j) { int o = __p.__offset(4); return o != 0 ? (SCEditor.SC2.MovieClip?)(new SCEditor.SC2.MovieClip()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MovieclipsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SCEditor.SC2.MovieClips> CreateMovieClips(FlatBufferBuilder builder,
      VectorOffset movieclipsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    MovieClips.AddMovieclips(builder, movieclipsOffset);
    return MovieClips.EndMovieClips(builder);
  }

  public static void StartMovieClips(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddMovieclips(FlatBufferBuilder builder, VectorOffset movieclipsOffset) { builder.AddOffset(0, movieclipsOffset.Value, 0); }
  public static VectorOffset CreateMovieclipsVector(FlatBufferBuilder builder, Offset<SCEditor.SC2.MovieClip>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMovieclipsVectorBlock(FlatBufferBuilder builder, Offset<SCEditor.SC2.MovieClip>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMovieclipsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<SCEditor.SC2.MovieClip>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMovieclipsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<SCEditor.SC2.MovieClip>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMovieclipsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SCEditor.SC2.MovieClips> EndMovieClips(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCEditor.SC2.MovieClips>(o);
  }
  public static void FinishMovieClipsBuffer(FlatBufferBuilder builder, Offset<SCEditor.SC2.MovieClips> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMovieClipsBuffer(FlatBufferBuilder builder, Offset<SCEditor.SC2.MovieClips> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class MovieClipsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Movieclips*/, SCEditor.SC2.MovieClipVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
