// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCEditor.SC2
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MatrixBank : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MatrixBank GetRootAsMatrixBank(ByteBuffer _bb) { return GetRootAsMatrixBank(_bb, new MatrixBank()); }
  public static MatrixBank GetRootAsMatrixBank(ByteBuffer _bb, MatrixBank obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MatrixBank __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SCEditor.SC2.Typing.Matrix2x3? Matrices(int j) { int o = __p.__offset(4); return o != 0 ? (SCEditor.SC2.Typing.Matrix2x3?)(new SCEditor.SC2.Typing.Matrix2x3()).__assign(__p.__vector(o) + j * 24, __p.bb) : null; }
  public int MatricesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public SCEditor.SC2.Typing.ColorTransform? Colors(int j) { int o = __p.__offset(6); return o != 0 ? (SCEditor.SC2.Typing.ColorTransform?)(new SCEditor.SC2.Typing.ColorTransform()).__assign(__p.__vector(o) + j * 7, __p.bb) : null; }
  public int ColorsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SCEditor.SC2.MatrixBank> CreateMatrixBank(FlatBufferBuilder builder,
      VectorOffset matricesOffset = default(VectorOffset),
      VectorOffset colorsOffset = default(VectorOffset)) {
    builder.StartTable(2);
    MatrixBank.AddColors(builder, colorsOffset);
    MatrixBank.AddMatrices(builder, matricesOffset);
    return MatrixBank.EndMatrixBank(builder);
  }

  public static void StartMatrixBank(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMatrices(FlatBufferBuilder builder, VectorOffset matricesOffset) { builder.AddOffset(0, matricesOffset.Value, 0); }
  public static void StartMatricesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(24, numElems, 4); }
  public static void AddColors(FlatBufferBuilder builder, VectorOffset colorsOffset) { builder.AddOffset(1, colorsOffset.Value, 0); }
  public static void StartColorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(7, numElems, 1); }
  public static Offset<SCEditor.SC2.MatrixBank> EndMatrixBank(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // matrices
    builder.Required(o, 6);  // colors
    return new Offset<SCEditor.SC2.MatrixBank>(o);
  }
}


static public class MatrixBankVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Matrices*/, 24 /*SCEditor.SC2.Typing.Matrix2x3*/, true)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Colors*/, 7 /*SCEditor.SC2.Typing.ColorTransform*/, true)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
