// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SCEditor.SC2
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MovieClipModifiers : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static MovieClipModifiers GetRootAsMovieClipModifiers(ByteBuffer _bb) { return GetRootAsMovieClipModifiers(_bb, new MovieClipModifiers()); }
  public static MovieClipModifiers GetRootAsMovieClipModifiers(ByteBuffer _bb, MovieClipModifiers obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyMovieClipModifiers(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, MovieClipModifiersVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MovieClipModifiers __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SCEditor.SC2.MovieClipModifier? Modifiers(int j) { int o = __p.__offset(4); return o != 0 ? (SCEditor.SC2.MovieClipModifier?)(new SCEditor.SC2.MovieClipModifier()).__assign(__p.__vector(o) + j * 4, __p.bb) : null; }
  public int ModifiersLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SCEditor.SC2.MovieClipModifiers> CreateMovieClipModifiers(FlatBufferBuilder builder,
      VectorOffset modifiersOffset = default(VectorOffset)) {
    builder.StartTable(1);
    MovieClipModifiers.AddModifiers(builder, modifiersOffset);
    return MovieClipModifiers.EndMovieClipModifiers(builder);
  }

  public static void StartMovieClipModifiers(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddModifiers(FlatBufferBuilder builder, VectorOffset modifiersOffset) { builder.AddOffset(0, modifiersOffset.Value, 0); }
  public static void StartModifiersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 2); }
  public static Offset<SCEditor.SC2.MovieClipModifiers> EndMovieClipModifiers(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SCEditor.SC2.MovieClipModifiers>(o);
  }
  public static void FinishMovieClipModifiersBuffer(FlatBufferBuilder builder, Offset<SCEditor.SC2.MovieClipModifiers> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMovieClipModifiersBuffer(FlatBufferBuilder builder, Offset<SCEditor.SC2.MovieClipModifiers> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class MovieClipModifiersVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Modifiers*/, 4 /*SCEditor.SC2.MovieClipModifier*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
